// 
class Solution {
public:
    int dp[101][101];
    int EndRow,EndCol;
    bool IsValid(int x,int y){
        if(x>=0&&x<=EndRow&&y>=0&&y<=EndCol)
            return true;
        return false;
    }
    int Rec(int Col,int Row,vector<vector<int>>&A){
        if(Row==(EndRow+1)){
            return 0;
        }
        if(dp[Row][Col]!=-1)
            return dp[Row][Col];
        int ans = INT_MAX;
        for(int i = -1 ; i < 2; i ++){
            if(IsValid(Row,Col+i))
              ans = min(ans,A[Row][Col] + Rec(Col + i,Row + 1,A));
        }
        return dp[Row][Col] = ans;
    }
    int minFallingPathSum(vector<vector<int>>& A) {
        EndRow = A.size()-1;
        EndCol = A[0].size()-1;
        memset(dp,-1,sizeof dp);
        int ans = INT_MAX;
        for(int i = 0 ;i <=EndCol; i ++){
            ans = min(ans , Rec(i,0,A));
        }
        return ans;
    }
};